#!/usr/bin/env python

################################################################################
# Copyright (c) 2013-2014, CEA
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#  1. Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
#  2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
################################################################################

__author__  = 'Julien Bigot <julien.bigot@cea.fr>'
__version__ = '0.2'
__date__    = '2013/08/01'
__license__ = 'BSD'

""" The Bash PreProcessor
"""

from optparse import OptionParser
from os import unlink, listdir, symlink
from os.path import join, basename, abspath, exists
from shutil import rmtree, copyfile
from subprocess import call
from sys import argv, exit
from tempfile import NamedTemporaryFile, mkdtemp
from uuid import uuid4



def callback_def(option, opt_str, value, parser):
    (optname, _, valval) = value.partition('=')
    parser.values.defines[optname.strip()] = valval.strip()

parser = OptionParser(description="", version=__version__, usage='%prog [options...] <source> <destination>')
parser.add_option('-I',
                  action='append',
                  dest='includes',
                  nargs=1,
                  default=list(),
                  metavar="DIR",
                  help='add DIR to search list for source directives'
)
parser.add_option('-D',
                  action='callback',
                  callback=callback_def,
                  dest='defines',
                  type="string",
                  default=dict(),
                  metavar='OPTION=value',
                  help='Sets the value of OPTION to "value"'
)
(opts, args) = parser.parse_args()
if len(args) != 2:
    parser.error("Invalid number of arguments")

# auto include install directory
#opts.includes.append(join(os.path.abspath(__file__), '..', 'include'))

tmpdir = mkdtemp(suffix='', prefix='bpp.tmp.')
result=1
try:
    for incdir in reversed(opts.includes):
        for incfile in listdir(incdir):
            if incfile[-7:] == '.bpp.sh':
                src = abspath(join(incdir, incfile))
                dst = join(tmpdir, basename(incfile))
                if exists(dst):
                    unlink(dst)
                symlink(src, dst)

    with open(join(tmpdir, basename(args[0])+'.sh'), 'w') as tmpfile:
        tmpfile.write("#!/bin/bash\n")
        inbash=True
        for var in opts.defines:
            tmpfile.write(var+'='+opts.defines[var]+"\n")
        EOCAT='EOCAT_'+str(uuid4()).replace('-','_')
        for line in file(args[0]):
            if line[0:4] == "!$SH":
                if not inbash:
                    tmpfile.write(EOCAT+"\n")
                    inbash=True
                tmpfile.write(line[4:])
            else:
                if inbash:
                    tmpfile.write("cat<<"+EOCAT+"\n")
                    inbash=False
                tmpfile.write(line)
        if not inbash:
            tmpfile.write(EOCAT+"\n")
        tmpfile.close()

        outfile=open(args[1], 'w')
        result = call(['bash','-r', basename(tmpfile.name)], stdout=outfile, cwd=tmpdir)
except:
    result=-1
rmtree(tmpdir)
exit(result)
